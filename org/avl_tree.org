* AVL trees
:PROPERTIES:
:header-args: :session :exports both
:END:

Named after the inventors, Adelson-Velsky and Landis, AVL trees are a
type of self-balancing binary search tree that avoid the worst case of
of O(n) time in binary tree operations on unbalanced trees.

** Balance Factor

For each node, the ~balance factor~ is calculated as the difference in
height between the right subtree and the left subtree. For a balanced
tree, the balance factor is either -1, 0 or 1. Any value outside
this range indicates that the tree is unbalanced and has to be fixed
by performing ~rotations~.

** Rotations

A subtree is considered right-heavy if the balance factor of its root
node is greater than 1, and is left-heavy if the balance factor is
less than -1.

A right-heavy subtree is fixed by performing a left rotation and
a left-heavy subtree is fixed by performing a right rotation.

*** Single Rotations

**** Left Rotation

To fix a right-heavy subtree, we perform a left rotation with the 
following steps:

[[file:img/left_rotation.png]]

1) Make the right child of the current root the new root.
2) Make the left child of the new root the right child of the old root.
3) Make the old root the left child of the new root.

**** Right Rotation

[[file:img/right_rotation.png]]

To fix a left-heavy subtree, we perform a right-roation with the
following steps:

1) Make the left child of the current root the new root.
2) Make the right child of the new root the left child of the old root
3) Make the old root the child of the new root.


*** Double Rotations

There are cases where single rotations will still result in unbalanced
trees. For these, we'll use double rotations.

**** Right-left rotations

This is required when a left-heavy tree's left child has a balance
factor that is greater than 0.

[[file:img/right_left_rotation.png]]

This rotation rebalances the subtree by first left-rotating the left
child of its root, then right-rotating the root.


**** Left-right rotations

This is required when the right child of a right-heavy subtree has a
balance factor less than 0.

[[file:img/left_right_rotation.png]]

This rotation rebalances the subtree by first right-rotating the
right child of its root, then left-rotating the root.


** AVL Implementation

The main difference between a typical Binary Search Tree and an AVL
tree is that after every insertion or deletion operation, the AVL
tree is rebalanced.

We define an AVL tree node:

#+begin_src python :results silent
from dataclasses import dataclass

@dataclass
class Node:
    value: int
    height: int
    left: 'Node' = None
    right: 'Node' = None
#+end_src

We use the ~height~ to keep track of the node's height in the tree and
determine the balance factor.

We define an AVL tree with insertion:

#+begin_src python :results output
from dataclasses import dataclass

@dataclass
class AVLTree:
    root: 'Node' = None

    def insert(self, value):
        self.root = self._insert_into(self.root, value)

    def _insert_into(self, node, value):
       if node is None:
           return Node(value=value, height=0)

       if value < node.value:
           node.left = self._insert_into(node.left, value)

       else:
           node.right = self._insert_into(node.right, value)

       self.update_height(node)

       if self.unbalanced(node):
           node = self.balance(node)

       return node

    def update_height(self, node):
        node.height = 1 + max(self.height(node.left), self.height(node.right))

    def balance(self, node):
        right_heavy = self.balance_factor(node) > 1
        if right_heavy:
            # if right child left heavy, left-right rotation, else, left rotation
            if self.balance_factor(node.right) < 0:
                node.right = self.right_rotate(node.right)
            node = self.left_rotate(node)
        else:
            # if left child right heavy, right-left rotation, else, right rotation
            if self.balance_factor(node.left) > 0:
                node.left = self.left_rotate(node.left)
            node = self.right_rotate(node)
        return node

    def right_rotate(self, node):
        new_root = node.left
        node.left = new_root.right
        new_root.right = node

        # update heights
        self.update_height(node)
        self.update_height(new_root)
        return new_root

    def left_rotate(self, node):
        new_root = node.right
        node.right = new_root.left
        new_root.left = node

        # update heights
        self.update_height(node)
        self.update_height(new_root)
        return new_root

    def unbalanced(self, node):
        balance_factor = self.balance_factor(node)
        return  balance_factor < -1 or balance_factor > 1

    def balance_factor(self, node):
        return self.height(node.right) - self.height(node.left)

    def height(self, node: Node) -> int:
        if node is None:
            return -1
        return node.height

    def preorder(self, action):
        if self.root:
            self._preorder(self.root, action)

    def _preorder(self, node, action):
        action(node)
        if node.left:
            self._preorder(node.left, action)
        if node.right:
            self._preorder(node.right, action)


tree = AVLTree()
for i in [4, 3, 6]:
    tree.insert(i)

print_nodes = lambda x: print((x.value, x.height), end=" ")
print("\nPreorder:")
tree.preorder(print_nodes)

unbalanced = Node(value=1, height=2,
                  left=Node(value=0, height=0),
                  right=Node(value=4, height=1,
                            left=Node(value=2, height=0),
                            right=Node(value=5, height=0)))
tree = AVLTree(root=unbalanced)
tree.insert(3)
print("\nPreorder:")
tree.preorder(print_nodes)
#+end_src

#+RESULTS:
: 
: Preorder:
: (4, 1) (3, 0) (6, 0) 
: Preorder:
: (2, 2) (1, 1) (0, 0) (4, 1) (3, 0) (5, 0)
